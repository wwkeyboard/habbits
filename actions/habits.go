package actions

import (
	"fmt"

	"github.com/gobuffalo/buffalo"
	"github.com/gobuffalo/pop"
	"github.com/pkg/errors"
	"github.com/wwkeyboard/habbits/models"
)

// This file is generated by Buffalo. It offers a basic structure for
// adding, editing and deleting a page. If your model is more
// complex or you need more than the basic implementation you need to
// edit this file.

// Following naming logic is implemented in Buffalo:
// Model: Singular (Habit)
// DB Table: Plural (habits)
// Resource: Plural (Habits)
// Path: Plural (/habits)
// View Template Folder: Plural (/templates/habits/)

// HabitsResource is the resource for the Habit model
type HabitsResource struct {
	buffalo.Resource
}

// List gets all Habits. This function is mapped to the path
// GET /habits
func (v HabitsResource) List(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	habits := &models.Habits{}

	// Paginate results. Params "page" and "per_page" control pagination.
	// Default values are "page=1" and "per_page=20".
	q := tx.PaginateFromParams(c.Params())

	// Retrieve all Habits from the DB
	if err := q.All(habits); err != nil {
		return errors.WithStack(err)
	}

	// Add the paginator to the context so it can be used in the template.
	c.Set("pagination", q.Paginator)

	return c.Render(200, r.Auto(c, habits))
}

// Show gets the data for one Habit. This function is mapped to
// the path GET /habits/{habit_id}
func (v HabitsResource) Show(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Habit
	habit := &models.Habit{}

	// To find the Habit the parameter habit_id is used.
	if err := tx.Find(habit, c.Param("habit_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, habit))
}

// New renders the form for creating a new Habit.
// This function is mapped to the path GET /habits/new
func (v HabitsResource) New(c buffalo.Context) error {
	fmt.Println("********************")
	fmt.Println(c.Session().Get("current_user"))
	fmt.Println("********************")
	u, ok := c.Data()["current_user"].(models.User)
	if !ok {
		return errors.New("current_user not set correctly")
	}

	h := &models.Habit{
		User: &u,
	}

	return c.Render(200, r.Auto(c, h))
}

// Create adds a Habit to the DB. This function is mapped to the
// path POST /habits
func (v HabitsResource) Create(c buffalo.Context) error {
	// Allocate an empty Habit
	habit := &models.Habit{}

	// Bind habit to the html form elements
	if err := c.Bind(habit); err != nil {
		return errors.WithStack(err)
	}

	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Validate the data from the html form
	verrs, err := tx.ValidateAndCreate(habit)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the new.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, habit))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Habit was created successfully")

	// and redirect to the habits index page
	return c.Render(201, r.Auto(c, habit))
}

// Edit renders a edit form for a Habit. This function is
// mapped to the path GET /habits/{habit_id}/edit
func (v HabitsResource) Edit(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Habit
	habit := &models.Habit{}

	if err := tx.Find(habit, c.Param("habit_id")); err != nil {
		return c.Error(404, err)
	}

	return c.Render(200, r.Auto(c, habit))
}

// Update changes a Habit in the DB. This function is mapped to
// the path PUT /habits/{habit_id}
func (v HabitsResource) Update(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Habit
	habit := &models.Habit{}

	if err := tx.Find(habit, c.Param("habit_id")); err != nil {
		return c.Error(404, err)
	}

	// Bind Habit to the html form elements
	if err := c.Bind(habit); err != nil {
		return errors.WithStack(err)
	}

	verrs, err := tx.ValidateAndUpdate(habit)
	if err != nil {
		return errors.WithStack(err)
	}

	if verrs.HasAny() {
		// Make the errors available inside the html template
		c.Set("errors", verrs)

		// Render again the edit.html template that the user can
		// correct the input.
		return c.Render(422, r.Auto(c, habit))
	}

	// If there are no errors set a success message
	c.Flash().Add("success", "Habit was updated successfully")

	// and redirect to the habits index page
	return c.Render(200, r.Auto(c, habit))
}

// Destroy deletes a Habit from the DB. This function is mapped
// to the path DELETE /habits/{habit_id}
func (v HabitsResource) Destroy(c buffalo.Context) error {
	// Get the DB connection from the context
	tx, ok := c.Value("tx").(*pop.Connection)
	if !ok {
		return errors.WithStack(errors.New("no transaction found"))
	}

	// Allocate an empty Habit
	habit := &models.Habit{}

	// To find the Habit the parameter habit_id is used.
	if err := tx.Find(habit, c.Param("habit_id")); err != nil {
		return c.Error(404, err)
	}

	if err := tx.Destroy(habit); err != nil {
		return errors.WithStack(err)
	}

	// If there are no errors set a flash message
	c.Flash().Add("success", "Habit was destroyed successfully")

	// Redirect to the habits index page
	return c.Render(200, r.Auto(c, habit))
}
